// src/components/features/TaskItem.tsx
import React, { useState } from 'react';
import { FrontendTask } from '@/src/types';

interface TaskItemProps {
  task: FrontendTask;
  darkMode: boolean;
  onToggle: (id: string) => void;
  onDelete: (id: string) => void;
  onUpdateDueDate?: (id: string, dueDate: Date | null) => void;
  onUpdateTask?: (id: string, updates: Partial<FrontendTask>) => void;
}

export const TaskItem: React.FC<TaskItemProps> = ({
  task,
  onToggle,
  onDelete,
  onUpdateDueDate,
}) => {
  const [showDatePicker, setShowDatePicker] = useState(false);

  const handleToggle = () => {
    onToggle(task.id);
  };

  const handleDelete = () => {
    onDelete(task.id);
  };

  const handleDueDateClick = () => {
    setShowDatePicker(!showDatePicker);
  };

  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newDate = e.target.value ? new Date(e.target.value) : null;
    if (onUpdateDueDate) {
      onUpdateDueDate(task.id, newDate);
    }
    setShowDatePicker(false);
  };

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
    }).format(date);
  };

  const formatDateTime = (date: Date) => {
    return new Intl.DateTimeFormat('en-US', {
      month: 'short',
      day: 'numeric',
      hour: 'numeric',
      minute: '2-digit',
    }).format(date);
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'from-red-500 to-red-600';
      case 'medium': return 'from-yellow-500 to-yellow-600';
      case 'low': return 'from-green-500 to-green-600';
      default: return 'from-gray-500 to-gray-600';
    }
  };

  const isOverdue = task.dueDate && new Date(task.dueDate) < new Date() && !task.completed;

  return (
    <div className={`task-card glassmorphism bg-white/10 border border-white/20 rounded-2xl p-6 transition-all duration-500 hover:scale-[1.02] hover:-translate-y-2 hover:bg-white/15 hover:shadow-2xl hover:shadow-teal-500/20 group cursor-pointer overflow-hidden relative ${task.completed ? 'opacity-75' : ''}`}>
      
      {/* Header with Category and Completion Button */}
      <div className="flex items-center justify-between mb-4">
        <div className="text-orange-500 font-bold text-sm tracking-wide uppercase">
          {task.category}
        </div>
        <button 
          onClick={handleToggle}
          className={`w-6 h-6 rounded-full bg-white flex items-center justify-center shadow-lg transition-all duration-300 hover:scale-110 cursor-pointer border-2 border-gray-300 ${task.completed ? 'animate-pulse' : ''}`}
          title={task.completed ? "Mark incomplete" : "Mark complete"}
        >
          <div className="w-3 h-3 rounded-full bg-green-500 flex items-center justify-center">
            {task.completed && (
              <svg className="w-2 h-2 text-white" fill="currentColor" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="3" d="M5 13l4 4L19 7"></path>
              </svg>
            )}
          </div>
        </button>
      </div>

      {/* Priority Dot - Top Left */}
      <div className={`w-3 h-3 rounded-full bg-gradient-to-r ${getPriorityColor(task.priority)} shadow-lg ring-2 ring-white/30 absolute top-4 left-4`}></div>

      {/* Content */}
      <div className="pt-8 pb-12 flex flex-col flex-grow">
        <div className={`text-lg font-bold mb-3 hover:text-orange-400 cursor-pointer ${task.completed ? 'text-white/50 line-through' : 'text-white'}`}>
          {task.text}
        </div>
        
        <div className={`text-sm mb-4 leading-relaxed flex-grow hover:text-orange-300 cursor-pointer ${task.completed ? 'text-white/40 line-through' : 'text-white/80'}`}>
          {task.description || 'No description provided'}
        </div>

        {/* Tags */}
        {task.tags && task.tags.length > 0 && (
          <div className="flex flex-wrap gap-2 mb-4">
            {task.tags.map((tag, index) => (
              <span key={index} className="px-2 py-1 rounded-full text-xs font-medium glassmorphism bg-white/20 text-white/90 border border-white/30">
                {tag}
              </span>
            ))}
          </div>
        )}

        {/* Bottom Info Row */}
        <div className="flex items-center justify-between text-xs mt-auto">
          <div className="flex items-center gap-1 text-white/50">
            <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Created {formatDateTime(task.createdAt)}</span>
          </div>

          <div className="relative">
            {task.completed ? (
              <div className="flex items-center gap-1 text-green-500 font-semibold">
                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Completed</span>
              </div>
            ) : (
              <>
                <button
                  onClick={handleDueDateClick}
                  className={`flex items-center gap-1 cursor-pointer transition-all duration-200 hover:scale-105 ${
                    isOverdue 
                      ? 'text-red-500 font-semibold' 
                      : 'text-white/70 hover:text-white'
                  }`}
                >
                  <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  <span>
                    {task.dueDate 
                      ? `Due ${formatDate(task.dueDate)}` 
                      : 'Set due date'
                    }
                  </span>
                </button>
                
                {showDatePicker && (
                  <div className="absolute bottom-full right-0 mb-2 p-2 rounded-lg border shadow-lg z-10 backdrop-blur-md bg-gray-800/90 border-gray-600">
                    <input
                      type="date"
                      onChange={handleDateChange}
                      value={task.dueDate ? task.dueDate.toISOString().split('T')[0] : ''}
                      className="px-2 py-1 rounded border text-sm backdrop-blur-sm bg-gray-700/80 border-gray-600 text-white"
                      aria-label="Set due date"
                      autoFocus
                    />
                  </div>
                )}
              </>
            )}
          </div>
        </div>
      </div>

      {/* Red Delete Button - Bottom Right */}
      <button
        onClick={handleDelete}
        className="absolute bottom-4 right-4 w-8 h-8 rounded-full bg-gradient-to-r from-red-500 to-red-600 flex items-center justify-center shadow-lg transition-all duration-300 hover:scale-110 cursor-pointer hover:shadow-red-500/30 glassmorphism"
        title="Delete task"
      >
        <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
      </button>

      {/* Glassmorphism shimmer effect on hover */}
      <div className="absolute inset-0 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none bg-gradient-to-r from-transparent via-white/5 to-transparent animate-pulse" />
    </div>
  );
};

export default TaskItem;
